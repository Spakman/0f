#!/usr/bin/env ruby
require "optparse"
require "pathname"


$0 = "0f #{ARGV.join(" ")}"

def puts_error_and_exit(message, exit_code: 128, prefix: "Argument error: ")
  $stderr.puts "#{prefix}#{message}"
  exit exit_code
end


begin
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: 0f [options]"

    opts.on("-b", "--base-dir BASEDIR", "Path to the root of the 0f directory.") do |base_dir|
      options[:base_dir] = base_dir.chomp(?/)
    end

    opts.on("-d", "--domain DOMAIN", "Domain name of the site to interact with.") do |domain|
      options[:domain] = domain
    end

    opts.on("-s", "--install-systemd-service [SERVICEFILES]", Array, "Install the passed comma-separated list of .service files to systemd. Requires -b.") do |service_files|
      options[:service_files] = service_files
    end

    opts.on("-n", "--install-nginx NGINXCONFIGFILE", "Install the passed .conf file to nginx.") do |nginx_config_file|
      options[:nginx_config_file] = nginx_config_file
    end

    opts.on("-f", "--fingerprint", "Fingerprint files in public/{css,font,js,img} and store in install/. Requires -d. Implies -r.") do
      options[:fingerprint] = true
      options[:restart] = true
    end

    opts.on("-r", "--restart", "Restart the systemd service for the site. Requires -d.") do
      options[:restart] = true
    end
  end.parse!
rescue OptionParser::InvalidOption => exception
  puts_error_and_exit(exception.message, prefix: "")
end


if options[:service_files]
  puts_error_and_exit("--install-service-files requires --base-dir") unless options[:base_dir]
end

if options[:domain]
  puts_error_and_exit("--domain requires --base-dir") unless options[:base_dir]
end

if options[:fingerprint]
  puts_error_and_exit("--fingerprint requires --domain") unless options[:domain]
end

if options[:restart]
  puts_error_and_exit("--restart requires --domain") unless options[:domain]
end


if options[:nginx_config_file]
  puts "/usr/bin/mv #{options[:nginx_config_file]} /etc/nginx/conf.d/"
  system "/usr/bin/mv #{options[:nginx_config_file]} /etc/nginx/conf.d/"
  puts "/bin/systemctl daemon-reload"
  system "/bin/systemctl daemon-reload"
  puts "/bin/systemctl restart nginx.service"
  system "/bin/systemctl restart nginx.service"
end

if options[:service_files]
  options[:service_files].each do |service_file|
    puts "/usr/bin/mv #{service_file} /etc/systemd/system/"
    system "/usr/bin/mv #{service_file} /etc/systemd/system/"
  end
  puts "/bin/systemctl daemon-reload"
  system "/bin/systemctl daemon-reload"

  (Pathname.new(options[:base_dir]) + "sites").children.each do |domain|
    puts "/bin/systemctl restart 0f@#{File.basename(domain)}.service"
    system "/bin/systemctl restart 0f@#{File.basename(domain)}.service"
  end
end

if options[:fingerprint]
  puts :Fingerprinting
  puts "#{File.dirname(__FILE__)}/fingerprint.sh #{options[:base_dir]} #{options[:domain]}"
  system "#{File.dirname(__FILE__)}/fingerprint.sh #{options[:base_dir]} #{options[:domain]}"
end

if options[:restart]
  puts "/bin/systemctl restart 0f@#{options[:domain]}.service"
  system "/bin/systemctl restart 0f@#{options[:domain]}.service"
end
